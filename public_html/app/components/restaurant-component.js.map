{"version":3,"sources":["../../src/app/components/restaurant-component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YA6Da,mBAAmB;gBAM9B,6BAAoB,WAA0B,EAAU,cAAuC;oBAA/F,iBAUC;oBAVmB,gBAAW,GAAX,WAAW,CAAe;oBAAU,mBAAc,GAAd,cAAc,CAAyB;oBAFvF,kBAAa,GAA8B,EAAE,CAAC;oBAIpD,IAAI,CAAC,cAAc,GAAoB,EAAE,CAAC;oBAC1C,IAAI,CAAC,cAAc,CAAC,OAAO,GAAG,EAAE,CAAC;oBACjC,IAAI,CAAC,cAAc,CAAC,IAAI,GAAG,kCAAW,CAAC,IAAI,CAAC;oBAC5C,IAAI,CAAC,cAAc,CAAC,IAAI,GAAG,KAAK,CAAC;oBACjC,IAAI,CAAC,GAAG,GAAG,WAAW,CAAC,UAAU,EAAE,CAAC;oBACpC,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,SAAS,CAAC,+BAAc,EACrD,UAAC,IAAS,EAAE,QAAmB,IAAK,OAAA,KAAI,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAnC,CAAmC,CAAC,CAAC;gBAE7E,CAAC;gBAED,sCAAQ,GAAR;gBAIA,CAAC;gBAED,6CAAe,GAAf,UAAgB,IAAgB;oBAE5B,EAAE,CAAC,CAAC,IAAI,IAAI,kCAAW,CAAC,IAAI,CAAC,CAC7B,CAAC;wBACC,MAAM,CAAC,MAAM,CAAC;oBAEhB,CAAC;oBACD,EAAE,CAAC,CAAC,IAAI,IAAI,kCAAW,CAAC,KAAK,CAAC,CAC9B,CAAC;wBACC,MAAM,CAAC,OAAO,CAAC;oBACjB,CAAC;oBACD,MAAM,CAAC,SAAS,CAAA;gBACpB,CAAC;gBAGD,4CAAc,GAAd,UAAe,IAAoB,EAAC,OAAiB;oBAGjD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;gBAG/B,CAAC;gBAEH,0BAAC;YAAD,CA/CA,AA+CC,IAAA;YA/CY,mBAAmB;gBAjD/B,gBAAS,CAAC;oBACT,QAAQ,EAAE,sBAAsB;oBAChC,MAAM,EAAE,CAAC,oVAiBR,CAAC;oBACF,QAAQ,EAAE,kzBA2BT;iBACF,CAAC;iDAOiC,wBAAa,EAA0B,mDAAuB;eANpF,mBAAmB,CA+C/B;;QACD,CAAC","file":"restaurant-component.js","sourcesContent":["import { Component } from '@angular/core';\nimport { RestaurantList } from './restaurant-list'\nimport { EditRestaurantContainer } from './edit-restaurant-container'\nimport { EditReviewDTOContainer } from './edit-reviewDTO-container'\nimport { RestaurantActionService } from './../services/restaurant-action.service';\nimport { WaitIndicator } from './wait-indicator';\nimport PubSubService, { PubSubSystem } from './../services/pubsub.service';\nimport { FeedbackMessage,messageType } from './../model/restaurant.interface';\nimport * as postal from 'postal';\nimport { FEEDBACK_TOPIC } from './../services/pubsub.service'\nimport {AppendPipe} from './../pipes/append-pipe';\n\n@Component({\n  selector: 'restaurant-component',\n  styles: [` \n\n     .restaurantApp   #mainDisplayMessage { \n       font-size: 20px;  \n       margin: 20px;\n       border: thin solid #ddd;\n       height: 40px;\n       padding: 5px;\n      }\n\n    .restaurantApp   #mainDisplayMessage.info {\n      color: blue; }\n    .restaurantApp   #mainDisplayMessage.error {\n      color: red; }\n\n\n\n  `],\n  template: `\n  \n  <h3>Restaurant List</h3>\n    <div id=\"reactRestaurantContainer\">\n        <div class=\"restaurantApp grouping\">\n            <wait-indicator [isProcessing]=\"true\"></wait-indicator>\n            <div [ngClass]=\"getMessageClass(displayMessage.type)\"  \n            id=\"mainDisplayMessage\">\n                <span *ngIf=\"displayMessage.show\">{{displayMessage.message |appendPipe |uppercase }}</span>\n               \n            </div>\n            <restaurant-list></restaurant-list>\n            <div id=\"editControlGroup\" class=\"grouping\">\n                    <edit-restaurant-container></edit-restaurant-container>\n                    <edit-reviewDTO-container></edit-reviewDTO-container>\n            </div>\n\n             \n        \n\n        </div>\n\n\n      \n    </div>\n \n  \n  `\n})\nexport class RestaurantComponent {\n\n  private displayMessage: FeedbackMessage;\n  private sub: PubSubSystem;\n  private subscriptions: ISubscriptionDefinition[] = [];\n\n  constructor(private subProvider: PubSubService, private actionProvider: RestaurantActionService) {\n\n    this.displayMessage = <FeedbackMessage>{};\n    this.displayMessage.message = \"\";\n    this.displayMessage.type = messageType.info;\n    this.displayMessage.show = false;\n    this.sub = subProvider.getService();\n    let s1 = this.sub.getChannel().subscribe(FEEDBACK_TOPIC,\n      (data: any, envelope: IEnvelope) => this.handleFeedback(data, envelope));\n\n  }\n\n  ngOnInit() {\n\n\n\n  }\n\n  getMessageClass(type:messageType)\n  {\n      if (type == messageType.info)\n      {\n        return \"info\";\n\n      }\n      if (type == messageType.error)\n      {\n        return \"error\";\n      }\n      return \"unknown\"\n  }\n\n\n  handleFeedback(data:FeedbackMessage,evelope:IEnvelope)\n  {\n  \n      this.displayMessage = data;\n    \n   \n  }\n\n}\n"],"sourceRoot":"/src"}