{"version":3,"sources":["../../src/app/components/wait-indicator.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;YAgBa,aAAa;gBAOxB,uBAAoB,WAA0B;oBAA1B,gBAAW,GAAX,WAAW,CAAe;oBAJrC,iBAAY,GAAY,KAAK,CAAC;oBAMrC,IAAI,CAAC,GAAG,GAAG,WAAW,CAAC,UAAU,EAAE,CAAC;gBAKtC,CAAC;gBAED,gCAAQ,GAAR;oBAAA,iBAGC;oBAFC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,SAAS,CAAC,2BAAU,EAChE,UAAC,IAAiB,EAAE,QAAmB,IAAK,OAAA,KAAI,CAAC,aAAa,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAlC,CAAkC,CAAC,CAAC;gBACpF,CAAC;gBAGD,mCAAW,GAAX;oBACE,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;wBAC1B,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC;wBACpC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;oBAC/B,CAAC;gBACH,CAAC;gBAGD,qCAAa,GAAb,UAAc,IAAiB,EAAE,QAAmB;oBAClD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC;gBACjC,CAAC;gBAEH,oBAAC;YAAD,CAlCA,AAkCC,IAAA;YA/BU;gBAAR,YAAK,EAAE;;+DAA+B;YAH5B,aAAa;gBAXzB,gBAAS,CAAC;oBACT,QAAQ,EAAE,gBAAgB;oBAC1B,QAAQ,EAAE,oFAOT;iBACF,CAAC;iDAQiC,wBAAa;eAPnC,aAAa,CAkCzB;;QAED,CAAC","file":"wait-indicator.js","sourcesContent":["import PubSubService, { PubSubSystem } from './../services/pubsub.service';\nimport { WaitRequest } from './../model/restaurant.interface';\nimport { Component, Input, EventEmitter, Output } from '@angular/core';\nimport { WAIT_TOPIC } from './../services/pubsub.service'\n\n@Component({\n  selector: 'wait-indicator',\n  template: `\n   \n  <div [class.waitIndicator]=\"isProcessing\">\n      \n  </div>\n \n  \n  `\n})\nexport class WaitIndicator {\n\n\n  @Input() isProcessing: boolean = false;\n\n  private sub: PubSubSystem;\n  private waitSubscription: ISubscriptionDefinition;\n  constructor(private subProvider: PubSubService) {\n\n    this.sub = subProvider.getService();\n\n\n\n\n  }\n\n  ngOnInit() {\n    this.waitSubscription = this.sub.getChannel().subscribe(WAIT_TOPIC,\n      (data: WaitRequest, envelope: IEnvelope) => this.handleRequest(data, envelope));\n  }\n\n\n  ngOnDestroy() {\n    if (this.waitSubscription) {\n      this.waitSubscription.unsubscribe();\n      this.waitSubscription = null;\n    }\n  }\n\n\n  handleRequest(data: WaitRequest, envelope: IEnvelope) {\n    this.isProcessing = data.state;\n  }\n\n}\n\n"],"sourceRoot":"/src"}