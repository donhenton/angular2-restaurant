{"version":3,"sources":["../../src/app/services/restaurant.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;YAQa,iBAAiB;gBAG1B,2BAAoB,KAAW;oBAAX,UAAK,GAAL,KAAK,CAAM;oBADrB,aAAQ,GAAG,uEAAuE,CAAC;gBAI7F,CAAC;gBAED,yCAAa,GAAb,UAAc,EAAU;oBAEpB,IAAI,GAAG,GAAI,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;oBAC9B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;yBACzB,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC,CAAA;gBAC3B,CAAC;gBAED,6CAAiB,GAAjB;oBAGI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAG;yBACrC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC,CAAA;gBAC3B,CAAC;gBAED,yCAAa,GAAb,UAAc,IAAe;oBAG1B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,GAAI,IAAI,CAAC,EAAE,EAAC,IAAI,CAAC,CAAC;gBACxD,CAAC;gBAED,yCAAa,GAAb,UAAc,IAAe;oBAEzB,OAAO,IAAI,CAAC,EAAE,CAAC,CAAC,uDAAuD;oBACvE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAI,IAAI,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC,CAAC,CAAE,6DAA6D;gBACxI,CAAC;gBAED,4CAAgB,GAAhB,UAAiB,IAAe;oBAG5B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,GAAK,IAAI,CAAC,EAAE,CAAC,CAAC;gBAExD,CAAC;gBAED,sCAAU,GAAV,UAAW,IAAkB;oBAExB,uEAAuE;oBAExE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,GAAE,SAAS,GAAE,IAAI,CAAC,YAAY,GAAC,GAAG,GAAC,IAAI,CAAC,SAAS,CAAC,EAAE,EAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAC5G,CAAC;gBAED,wCAAY,GAAZ,UAAa,IAAkB;oBAG3B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,GAAE,SAAS,GAAE,IAAI,CAAC,YAAY,GAAC,GAAG,GAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;gBAChG,CAAC;gBAED,qCAAS,GAAT,UAAU,IAAkB;oBAGxB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAE,SAAS,GAAE,IAAI,CAAC,YAAY,EAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBACvF,CAAC;gBAGL,wBAAC;YAAD,CA7DA,AA6DC,IAAA;YA7DY,iBAAiB;gBAD7B,iBAAU,EAAE;iDAIkB,WAAI;eAHtB,iBAAiB,CA6D7B;;QAAA,CAAC","file":"restaurant.service.js","sourcesContent":["import {Http} from '@angular/http';\n//import 'rxjs/Rx'; for all\nimport 'rxjs/add/operator/map';\nimport {Observable} from 'rxjs/Observable';\nimport {Injectable} from '@angular/core';\nimport {Restaurant,ReviewDTO,ReviewPayload} from './../model/restaurant.interface';\n\n@Injectable()\nexport class RestaurantService {\n\n    private   URL_BASE = \"http://donhenton-springmvc3.herokuapp.com:80/app/backbone/restaurant/\";\n    constructor(private _http: Http)\n    {\n\n    }\n\n    getRestaurant(id: string): Observable<Restaurant>\n    {\n        var url  = this.URL_BASE  +id;\n        return this._http.get(url)\n        .map(res => res.json())\n    }\n\n    getAllRestaurants(): Observable<Restaurant[]>\n    {\n        \n        return this._http.get(this.URL_BASE  )\n        .map(res => res.json())\n    }\n\n    saveResaurant(body:Restaurant)\n    {\n        \n       return this._http.put(this.URL_BASE  + body.id,body);\n    }\n\n    addRestaurant(body:Restaurant)\n    {\n        delete body.id; //id should not exist, may be submitted from downstream\n        return this._http.post(this.URL_BASE   ,body).map(res => res.json());  //will return {id: 999}, the id of the newly saved restaurant\n    }\n\n    deleteRestaurant(body:Restaurant)\n    {\n\n        return this._http.delete(this.URL_BASE   + body.id);\n\n    }\n\n    saveReview(body:ReviewPayload)\n    {\n         //http://donhenton-springmvc3.herokuapp.com/app/backbone/review/70/153 \n         \n        return this._http.put(this.URL_BASE +\"review/\" +body.restaurantId+\"/\"+body.reviewDTO.id,body.reviewDTO);\n    }\n\n    deleteReview(body:ReviewPayload)\n    {\n         \n        return this._http.delete(this.URL_BASE +\"review/\" +body.restaurantId+\"/\"+body.reviewDTO.id);\n    }\n\n    addReview(body:ReviewPayload)\n    {\n         \n        return this._http.post(this.URL_BASE +\"review/\" +body.restaurantId,body.reviewDTO);\n    }\n\n\n}"],"sourceRoot":"/src"}